use eframe::egui;
use uuid::Uuid;

use crate::state::{AppState, UiState};
use crate::ui::{theme::ThemeColors, UiComponents};
use crate::ui::panel_actions::{SidePanelActions, CentralPanelActions};

/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—è–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
pub struct PanelManager;

impl PanelManager {
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –±–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏–π (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è)
    pub fn show_side_panel_simple(
        app_state: &AppState,
        ui_state: &mut UiState,
        ui: &mut egui::Ui,
        colors: &ThemeColors,
    ) -> SidePanelActions {
        let mut actions = SidePanelActions::new();
        let panel_width = ui.available_width() * 0.30;
        
        egui::SidePanel::left("notes_panel")
            .frame(egui::Frame {
                fill: colors.panel_bg,
                stroke: egui::Stroke::NONE,
                inner_margin: egui::Margin::same(8),
                shadow: colors.panel_shadow(),
                ..Default::default()
            })
            .resizable(false)
            .min_width(panel_width)
            .max_width(panel_width)
            .show_inside(ui, |ui| {
                let scroll_area = egui::ScrollArea::vertical()
                    .scroll_bar_visibility(egui::scroll_area::ScrollBarVisibility::VisibleWhenNeeded)
                    .auto_shrink([false, false]);
                
                let scroll_output = scroll_area.show(ui, |ui| {
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    ui.horizontal(|ui| {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
                        let loaded_count = app_state.notes.len();
                        let total_count = app_state.total_notes_count();
                        
                        let title_text = if loaded_count == total_count {
                            format!("–ó–∞–º–µ—Ç–∫–∏ ({})", total_count)
                        } else {
                            format!("–ó–∞–º–µ—Ç–∫–∏ ({}/{})", loaded_count, total_count)
                        };
                        
                        ui.add(egui::Label::new(
                            egui::RichText::new(title_text)
                                .size(18.0)
                                .strong()
                                .color(colors.header)
                        ));
                        
                        ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                            if UiComponents::icon_button(
                                ui, "‚öô", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                                colors.button_bg, colors.button_border
                            ).clicked() {
                                actions.show_settings();
                            }
                            
                            if UiComponents::icon_button(
                                ui, "üìÅ", "–†–µ–¥–∞–∫—Ç–æ—Ä –≥—Ä—É–ø–ø",
                                colors.button_bg, colors.button_border
                            ).clicked() {
                                actions.show_group_editor();
                            }
                            
                            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                            if ui_state.show_performance_stats {
                                let mode_icon = match app_state.load_mode {
                                    crate::state::LoadMode::Auto => "ü§ñ",
                                    crate::state::LoadMode::Eager => "üìã", 
                                    crate::state::LoadMode::Lazy => "‚ö°",
                                };
                                ui.add(egui::Label::new(mode_icon).sense(egui::Sense::hover()))
                                    .on_hover_text(format!("–†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏: {:?}", app_state.load_mode));
                            }
                        });
                    });
                    
                    ui.add_space(10.0);
                    
                    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if ui.add_sized([panel_width - 12.0, 32.0], egui::Button::new("+ –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞")).clicked() {
                        actions.new_note();
                    }
                    
                    ui.add_space(6.0);
                    
                    if ui.add_sized([panel_width - 12.0, 32.0], egui::Button::new("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")).clicked() {
                        actions.create_group();
                    }
                    
                    ui.add_space(10.0);

                    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏ –∑–∞–º–µ—Ç–æ–∫ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    let notes_start_y = ui.cursor().top();
                    
                    Self::show_groups_and_notes_simple(
                        app_state, ui_state, ui, colors, panel_width, &mut actions
                    );
                    
                    let notes_end_y = ui.cursor().top();
                    
                    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ª–µ–Ω–∏–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    if app_state.load_mode == crate::state::LoadMode::Lazy && 
                       app_state.notes.len() < app_state.total_notes_count() {
                        ui.add_space(10.0);
                        ui.horizontal(|ui| {
                            ui.add_space((panel_width - 200.0) / 2.0);
                            ui.add(egui::Spinner::new());
                            ui.add_space(8.0);
                            ui.label("–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
                        });
                        ui.add_space(10.0);
                    }
                    
                    (notes_start_y, notes_end_y)
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if app_state.load_mode == crate::state::LoadMode::Lazy {
                    let scroll_offset = scroll_output.state.offset.y;
                    let viewport_height = scroll_output.inner_rect.height();
                    let content_height = scroll_output.content_size.y;
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–±–ª–∏–∑–∏–ª—Å—è –∫ –∫–æ–Ω—Ü—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ 20% –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
                    let scroll_threshold = 0.8;
                    if content_height > 0.0 && 
                       (scroll_offset + viewport_height) / content_height > scroll_threshold {
                        
                        // –ü—Ä–∏–º–µ—Ä–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–º–µ—Ç–æ–∫
                        let total_notes = app_state.total_notes_count();
                        if total_notes > 0 {
                            let visible_start = (scroll_offset / 40.0) as usize; // –ü—Ä–∏–º–µ—Ä–Ω–æ 40px –Ω–∞ –∑–∞–º–µ—Ç–∫—É
                            let visible_count = (viewport_height / 40.0) as usize + 5; // –ë—É—Ñ–µ—Ä 5 –∑–∞–º–µ—Ç–æ–∫
                            let visible_end = (visible_start + visible_count).min(total_notes);
                            
                            actions.request_load_more(visible_start, visible_end);
                        }
                    }
                }
            });
            
        actions
    }
    
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏–π (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è)
    pub fn show_central_panel_simple(
        app_state: &mut AppState,
        ui_state: &mut UiState,
        ui: &mut egui::Ui,
        colors: &ThemeColors,
    ) -> CentralPanelActions {
        let mut actions = CentralPanelActions::new();
        
        egui::CentralPanel::default()
            .frame(egui::Frame {
                fill: colors.central_bg,
                stroke: egui::Stroke::NONE,
                inner_margin: egui::Margin::same(8),
                ..Default::default()
            })
            .show_inside(ui, |ui| {
                ui.vertical(|ui| {
                    if let Some(idx) = ui_state.selected_note {
                        if idx < app_state.notes.len() {
                            Self::show_note_editor_simple(
                                app_state, ui_state, ui, idx, colors, &mut actions
                            );
                        }
                    } else {
                        Self::show_note_creation_form_simple(app_state, ui_state, ui, &mut actions);
                    }
                    
                    // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                    ui.add_space(12.0);
                    Self::show_persistent_text_field_simple(app_state, ui, &mut actions);
                });
            });
            
        actions
    }
    
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∏ –∑–∞–º–µ—Ç–æ–∫
    fn show_groups_and_notes_simple(
        app_state: &AppState,
        ui_state: &UiState,
        ui: &mut egui::Ui,
        colors: &ThemeColors,
        panel_width: f32,
        actions: &mut SidePanelActions,
    ) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã
        let root_groups: Vec<(Uuid, String, bool)> = app_state.groups.iter()
            .filter(|g| g.parent_id.is_none())
            .map(|g| (g.id, g.name.clone(), g.collapsed))
            .collect();
        
        for (group_id, group_name, collapsed) in root_groups {
            if let Some(toggle_id) = Self::show_group_with_hierarchy_simple(
                app_state, ui_state, ui, colors, group_id, &group_name, 
                collapsed, 0, panel_width, actions
            ) {
                actions.toggle_group(toggle_id);
            }
        }

        // –ó–∞–º–µ—Ç–∫–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã
        Self::show_ungrouped_notes_simple(app_state, ui_state, ui, colors, panel_width, actions);
    }
    
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
    fn show_group_with_hierarchy_simple(
        app_state: &AppState,
        ui_state: &UiState,
        ui: &mut egui::Ui,
        colors: &ThemeColors,
        group_id: Uuid,
        group_name: &str,
        collapsed: bool,
        depth: usize,
        panel_width: f32,
        actions: &mut SidePanelActions,
    ) -> Option<Uuid> {
        let mut toggled_group: Option<Uuid> = None;
        
        // –û—Ç—Å—Ç—É–ø –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        if depth > 0 {
            ui.add_space(depth as f32 * 15.0);
        }
        
        let note_indices: Vec<usize> = app_state.notes.iter().enumerate()
            .filter(|(_, n)| n.group_id == Some(group_id))
            .map(|(i, _)| i)
            .collect();
        
        let header = egui::CollapsingHeader::new(
            egui::RichText::new(group_name)
                .color(colors.header)
                .strong()
        )
            .id_salt(group_id)
            .default_open(!collapsed)
            .show(ui, |ui| {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
                for idx in note_indices {
                    if let Some(note) = app_state.notes.get(idx) {
                        let is_selected = ui_state.selected_note == Some(idx);
                        let mut title = String::new();
                        if note.pinned { 
                            title.push_str("üìå "); 
                        }
                        title.push_str(&note.title);
                        
                        let label = egui::SelectableLabel::new(is_selected, 
                            egui::RichText::new(title).color(colors.text)
                        );
                        
                        if ui.add_sized([panel_width - 20.0, 28.0], label).clicked() {
                            actions.select_note(idx);
                        }
                        ui.add_space(4.0);
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã
                let subgroups: Vec<(Uuid, String, bool)> = app_state.groups.iter()
                    .filter(|g| g.parent_id == Some(group_id))
                    .map(|g| (g.id, g.name.clone(), g.collapsed))
                    .collect();
                
                for (sub_id, sub_name, sub_collapsed) in subgroups {
                    if let Some(sub_toggle) = Self::show_group_with_hierarchy_simple(
                        app_state, ui_state, ui, colors, sub_id, &sub_name, 
                        sub_collapsed, depth + 1, panel_width, actions
                    ) {
                        toggled_group = Some(sub_toggle);
                    }
                }
            });
        
        if header.header_response.clicked() {
            return Some(group_id);
        }
        
        toggled_group
    }
    
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –≥—Ä—É–ø–ø—ã
    fn show_ungrouped_notes_simple(
        app_state: &AppState,
        ui_state: &UiState,
        ui: &mut egui::Ui,
        colors: &ThemeColors,
        panel_width: f32,
        actions: &mut SidePanelActions,
    ) {
        let no_group_notes: Vec<_> = app_state.notes.iter().enumerate()
            .filter(|(_, n)| n.group_id.is_none())
            .collect();
        
        if !no_group_notes.is_empty() {
            egui::CollapsingHeader::new(
                egui::RichText::new("–ë–µ–∑ –≥—Ä—É–ø–ø—ã")
                    .color(colors.header)
                    .strong()
            )
                .default_open(true)
                .show(ui, |ui| {
                    for (idx, note) in no_group_notes {
                        let is_selected = ui_state.selected_note == Some(idx);
                        let mut title = String::new();
                        if note.pinned { 
                            title.push_str("üìå "); 
                        }
                        title.push_str(&note.title);
                        
                        let label = egui::SelectableLabel::new(is_selected, 
                            egui::RichText::new(title).color(colors.text)
                        );
                        
                        if ui.add_sized([panel_width - 20.0, 28.0], label).clicked() {
                            actions.select_note(idx);
                        }
                        ui.add_space(4.0);
                    }
                });
        }
    }
    
    /// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–º–µ—Ç–∫–∏
    fn show_note_editor_simple(
        app_state: &AppState,
        ui_state: &mut UiState,
        ui: &mut egui::Ui,
        idx: usize,
        colors: &ThemeColors,
        actions: &mut CentralPanelActions,
    ) {
        let note = &app_state.notes[idx];
        
        ui.add_space(6.0);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ui.horizontal(|ui| {
            // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–µ–ø–∏—Ç—å/–æ—Ç–∫—Ä–µ–ø–∏—Ç—å
            let pin_icon = if note.pinned { "üìå" } else { "üìç" };
            if ui.add(egui::Label::new(pin_icon).sense(egui::Sense::click()))
                .on_hover_text(if note.pinned { "–û—Ç–∫—Ä–µ–ø–∏—Ç—å" } else { "–ó–∞–∫—Ä–µ–ø–∏—Ç—å" })
                .clicked() 
            {
                actions.toggle_pin(idx);
            }
            
            if ui_state.editing_title == Some(idx) {
                let mut title = note.title.clone();
                let response = UiComponents::single_line_text_edit(
                    ui, 
                    &mut title, 
                    "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏", 
                    ui.available_width() - 36.0, 
                    32.0
                );
                
                if response.lost_focus() && ui.input(|i| i.key_pressed(egui::Key::Enter)) || 
                   response.lost_focus() && !response.has_focus() 
                {
                    if !title.trim().is_empty() {
                        actions.update_title(idx, title.clone());
                    }
                    ui_state.editing_title = None;
                }
                
                if ui.add(egui::Button::new("‚úîÔ∏è")).on_hover_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å").clicked() {
                    if !title.trim().is_empty() {
                        actions.update_title(idx, title.clone());
                    }
                    ui_state.editing_title = None;
                }
            } else {
                ui.label(
                    egui::RichText::new(&note.title)
                        .size(20.0)
                        .strong()
                );
                if ui.add(egui::Label::new("üìù").sense(egui::Sense::click()))
                    .on_hover_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫")
                    .clicked() 
                {
                    ui_state.editing_title = Some(idx);
                }
            }
        });
        
        ui.add_space(6.0);
        
        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
        if ui_state.editing_content == Some(idx) {
            // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            UiComponents::multiline_text_edit(
                ui, 
                &mut ui_state.new_note_content, 
                "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏..."
            );
        } else {
            // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            let mut readonly_content = note.content.clone();
            ui.add_enabled_ui(false, |ui| {
                UiComponents::multiline_text_edit(ui, &mut readonly_content, "");
            });
        }
        
        ui.add_space(8.0);
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        ui.horizontal(|ui| {
            if ui_state.editing_content == Some(idx) {
                // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if ui.add_sized([80.0, 32.0], egui::Button::new("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")).clicked() {
                    actions.save_note();
                }
                ui.add_space(8.0);
                if ui.add_sized([80.0, 32.0], egui::Button::new("‚ùå –û—Ç–º–µ–Ω–∞")).clicked() {
                    ui_state.stop_editing();
                }
            } else {
                // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                if ui.add_sized([90.0, 32.0], egui::Button::new("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")).clicked() {
                    actions.copy_to_clipboard();
                }
                ui.add_space(8.0);
                
                if ui.add_sized([110.0, 32.0], egui::Button::new("üìÑ –í –∑–∞–º–µ—Ç–∫–∏")).clicked() {
                    actions.copy_to_persistent();
                }
                ui.add_space(8.0);
                
                if ui.add_sized([110.0, 32.0], egui::Button::new("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")).clicked() {
                    ui_state.editing_content = Some(idx);
                }
                ui.add_space(8.0);
                
                if ui.add_sized([80.0, 32.0], egui::Button::new("üóë –£–¥–∞–ª–∏—Ç—å")).clicked() {
                    actions.delete_note();
                }
            }
        });
    }
    
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    fn show_note_creation_form_simple(
        app_state: &AppState,
        ui_state: &mut UiState,
        ui: &mut egui::Ui,
        actions: &mut CentralPanelActions,
    ) {
        ui.vertical(|ui| {
            // –ü–æ–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            UiComponents::text_field_frame().show(ui, |ui| {
                UiComponents::single_line_text_edit(
                    ui,
                    &mut ui_state.new_note_title,
                    "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏",
                    ui.available_width(),
                    28.0
                );
            });
            
            ui.add_space(10.0);
            
            // –ü–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            UiComponents::multiline_text_edit(
                ui,
                &mut ui_state.new_note_content,
                "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏..."
            );
            
            ui.add_space(10.0);
            
            // –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
            ui.horizontal(|ui| {
                ui.label("–ì—Ä—É–ø–ø–∞:");
                UiComponents::group_selector(
                    ui,
                    ui_state.new_note_group_id,
                    &app_state.groups,
                    "new_note_group_select",
                    |group_id| ui_state.new_note_group_id = group_id,
                    20
                );
            });
            
            ui.add_space(16.0);
            
            // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
            if ui.add_sized([120.0, 36.0], egui::Button::new("–°–æ–∑–¥–∞—Ç—å")).clicked() {
                actions.create_note();
            }
        });
    }
    
    /// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    fn show_persistent_text_field_simple(
        app_state: &mut AppState,
        ui: &mut egui::Ui,
        actions: &mut CentralPanelActions,
    ) {
        ui.separator();
        ui.add_space(8.0);
        
        ui.label(
            egui::RichText::new("–ß–µ—Ä–Ω–æ–≤–∏–∫")
                .size(16.0)
                .strong()
        );
        ui.add_space(6.0);
        
        let response = UiComponents::multiline_text_edit(
            ui,
            &mut app_state.persistent_text,
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏..."
        );
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
        if response.changed() {
            actions.persistent_text_changed();
        }
    }
} 