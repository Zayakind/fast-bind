use eframe::egui;
use uuid::Uuid;
use crate::notes::Note;
use crate::state::{AppState, UiState, LoadMode};
use crate::ui::{UiComponents, ThemeMode, SettingsActions};

/// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ–∫–Ω–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
pub struct WindowManager;

impl WindowManager {
    
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    pub fn show_settings_window(
        app_state: &AppState,
        ui_state: &mut UiState,
        ctx: &egui::Context,
    ) -> SettingsActions {
        let mut actions = SettingsActions::new();
        
        if ui_state.show_settings {
            egui::Window::new("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                .collapsible(false)
                .resizable(false)
                .default_width(400.0)
                .anchor(egui::Align2::CENTER_CENTER, [0.0, 0.0])
                .show(ctx, |ui| {
                    egui::ScrollArea::vertical().show(ui, |ui| {
                        // –°–µ–∫—Ü–∏—è —Ç–µ–º—ã
                        ui.heading("üé® –¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
                        ui.add_space(10.0);
                        
                        ui.horizontal(|ui| {
                            if ui.radio_value(&mut ui_state.theme_mode, ThemeMode::Auto, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏").clicked() {
                                actions.change_theme(ui_state.theme_mode);
                            }
                            ui.label("(—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º–µ)");
                        });
                        
                        if ui.radio_value(&mut ui_state.theme_mode, ThemeMode::Light, "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞").clicked() {
                            actions.change_theme(ui_state.theme_mode);
                        }
                        if ui.radio_value(&mut ui_state.theme_mode, ThemeMode::Dark, "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞").clicked() {
                            actions.change_theme(ui_state.theme_mode);
                        }
                        
                        ui.add_space(20.0);
                        ui.separator();
                        ui.add_space(15.0);
                        
                        // –°–µ–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        ui.heading("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
                        ui.add_space(10.0);
                        
                        ui.label("–†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫:");
                        ui.add_space(5.0);
                        
                        let old_mode = ui_state.preferred_load_mode.clone();
                        ui.horizontal(|ui| {
                            if ui.radio_value(&mut ui_state.preferred_load_mode, LoadMode::Auto, "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏").clicked() {
                                actions.change_load_mode(ui_state.preferred_load_mode.clone());
                            }
                            ui.label("(–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä)");
                        });
                        if ui.radio_value(&mut ui_state.preferred_load_mode, LoadMode::Eager, "üìã –ó–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—ë").clicked() {
                            actions.change_load_mode(ui_state.preferred_load_mode.clone());
                        }
                        if ui.radio_value(&mut ui_state.preferred_load_mode, LoadMode::Lazy, "‚ö° –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞").clicked() {
                            actions.change_load_mode(ui_state.preferred_load_mode.clone());
                        }
                        
                        ui.add_space(10.0);
                        
                        let old_stats = ui_state.show_performance_stats;
                        if ui.checkbox(&mut ui_state.show_performance_stats, "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏").clicked() {
                            if old_stats != ui_state.show_performance_stats {
                                actions.toggle_performance_stats(ui_state.show_performance_stats);
                            }
                        }
                        
                        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        if ui_state.show_performance_stats {
                            ui.add_space(10.0);
                            ui.group(|ui| {
                                ui.label("üìà –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                                ui.add_space(5.0);
                                
                                ui.horizontal(|ui| {
                                    ui.label("–†–µ–∂–∏–º:");
                                    ui.colored_label(
                                        egui::Color32::from_rgb(0, 150, 0),
                                        format!("{:?}", app_state.load_mode)
                                    );
                                });
                                
                                ui.horizontal(|ui| {
                                    ui.label("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫:");
                                    ui.colored_label(
                                        egui::Color32::from_rgb(0, 100, 200),
                                        format!("{}", app_state.notes.len())
                                    );
                                });
                                
                                ui.horizontal(|ui| {
                                    ui.label("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
                                    ui.colored_label(
                                        egui::Color32::from_rgb(100, 100, 100),
                                        format!("{}", app_state.total_notes_count())
                                    );
                                });
                                
                                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                                if let Some(stats) = app_state.get_loading_stats() {
                                    ui.horizontal(|ui| {
                                        ui.label("–í –∫—ç—à–µ:");
                                        ui.colored_label(
                                            egui::Color32::from_rgb(150, 0, 150),
                                            format!("{}", stats.loaded_notes)
                                        );
                                    });
                                    
                                    ui.horizontal(|ui| {
                                        ui.label("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞:");
                                        ui.colored_label(
                                            egui::Color32::from_rgb(200, 100, 0),
                                            format!("{:.1}%", stats.cache_hit_ratio * 100.0)
                                        );
                                    });
                                }
                            });
                        }
                        
                        // –û–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
                        ui.add_space(10.0);
                        ui.collapsing("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤", |ui| {
                            ui.label("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ—Ç–æ–∫");
                            ui.label("üìã –ó–∞–≥—Ä—É–∂–∞—Ç—å –≤—Å—ë: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è <100 –∑–∞–º–µ—Ç–æ–∫)");
                            ui.label("‚ö° –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π)");
                        });
                        
                        ui.add_space(20.0);
                        ui.separator();
                        ui.add_space(10.0);
                        
                        if ui.button("–ó–∞–∫—Ä—ã—Ç—å").clicked() {
                            actions.close();
                        }
                    });
                });
        }
        
        actions
    }
    
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    pub fn show_group_creation_window(
        app_state: &AppState,
        ui_state: &mut UiState,
        ctx: &egui::Context,
        on_create_group: impl FnOnce(String, Option<Uuid>, Vec<Uuid>),
    ) -> bool {
        let mut should_create = false;
        
        if ui_state.show_group_creation {
            let window_title = if ui_state.creating_subgroup_for.is_some() {
                "–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É"
            } else {
                "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"
            };

            egui::Window::new(window_title)
                .collapsible(false)
                .resizable(false)
                .anchor(egui::Align2::CENTER_CENTER, [0.0, 0.0])
                .show(ctx, |ui| {
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –≥—Ä—É–ø–ø–µ
                    if let Some(parent_id) = ui_state.creating_subgroup_for {
                        if let Some(parent_group) = app_state.groups.iter().find(|g| g.id == parent_id) {
                            ui.label(format!("–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –≥—Ä—É–ø–ø–∞: {}", parent_group.name));
                            ui.separator();
                        }
                    }

                    ui.label("–ò–º—è –≥—Ä—É–ø–ø—ã:");
                    UiComponents::text_field_frame().show(ui, |ui| {
                        UiComponents::single_line_text_edit(
                            ui,
                            &mut ui_state.new_group_name,
                            "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
                            ui.available_width(),
                            24.0
                        );
                    });
                    ui.add_space(10.0);
                    
                    // –í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–≥—Ä—É–ø–ø—É)
                    if ui_state.creating_subgroup_for.is_none() {
                        ui.label("–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –≥—Ä—É–ø–ø–∞:");
                        UiComponents::group_selector(
                            ui,
                            ui_state.new_note_parent_group_id,
                            &app_state.groups,
                            "parent_group_select",
                            |group_id| ui_state.new_note_parent_group_id = group_id,
                            20
                        );
                    }
                    
                    ui.separator();
                    
                    // –í—ã–±–æ—Ä –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
                    ui.label("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –≤ –≥—Ä—É–ø–ø—É:");
                    let ungrouped_notes: Vec<&Note> = app_state.notes.iter()
                        .filter(|note| note.group_id.is_none())
                        .collect();
                    
                    if ungrouped_notes.is_empty() {
                        ui.label("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –±–µ–∑ –≥—Ä—É–ø–ø—ã");
                    } else {
                        for note in ungrouped_notes {
                            let mut checked = ui_state.group_creation_selected_notes.contains(&note.id);
                            if ui.checkbox(&mut checked, &note.title).changed() {
                                if checked {
                                    ui_state.group_creation_selected_notes.push(note.id);
                                } else {
                                    ui_state.group_creation_selected_notes.retain(|id| id != &note.id);
                                }
                            }
                        }
                    }
                    
                    ui.separator();
                    
                    ui.horizontal(|ui| {
                        if ui.button("–°–æ–∑–¥–∞—Ç—å").clicked() && !ui_state.new_group_name.trim().is_empty() {
                            should_create = true;
                        }
                        
                        if ui.button("–û—Ç–º–µ–Ω–∞").clicked() {
                            ui_state.clear_group_form();
                        }
                    });
                });
        }
        
        if should_create {
            let parent_id = if ui_state.creating_subgroup_for.is_some() {
                ui_state.creating_subgroup_for
            } else {
                ui_state.new_note_parent_group_id
            };
            
            on_create_group(
                ui_state.new_group_name.trim().to_string(),
                parent_id,
                ui_state.group_creation_selected_notes.clone()
            );
            ui_state.clear_group_form();
        }
        
        should_create
    }
    
    /// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø
    pub fn show_group_editor_window(
        app_state: &AppState,
        ui_state: &mut UiState,
        ctx: &egui::Context,
    ) -> (Vec<(Uuid, String, Option<Uuid>)>, Vec<Uuid>) {
        let mut groups_to_save = Vec::new();
        let mut groups_to_delete = Vec::new();
        if ui_state.show_group_editor {
            egui::Window::new("–†–µ–¥–∞–∫—Ç–æ—Ä –≥—Ä—É–ø–ø")
                .collapsible(false)
                .resizable(true)
                .min_width(400.0)
                .min_height(300.0)
                .anchor(egui::Align2::CENTER_CENTER, [0.0, 0.0])
                .show(ctx, |ui| {
                    ui.heading("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏");
                    ui.separator();
                    
                    egui::ScrollArea::vertical()
                        .max_height(400.0)
                                            .show(ui, |ui| {
                        let mut groups_data: Vec<(Uuid, String, Option<Uuid>, u32)> = app_state.groups.iter()
                            .map(|g| (g.id, g.name.clone(), g.parent_id, g.level))
                            .collect();
                        
                        groups_data.sort_by(|a, b| a.3.cmp(&b.3).then(a.1.cmp(&b.1)));
                        
                        for (group_id, group_name, parent_id, level) in groups_data {
                                ui.horizontal(|ui| {
                                    // –û—Ç—Å—Ç—É–ø –¥–ª—è —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                                    ui.add_space(level as f32 * 20.0);
                                    
                                    if ui_state.editing_group_id == Some(group_id) {
                                        // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                        ui.vertical(|ui| {
                                            ui.horizontal(|ui| {
                                                ui.label("–ò–º—è:");
                                                UiComponents::text_field_frame().show(ui, |ui| {
                                                    UiComponents::single_line_text_edit(
                                                        ui,
                                                        &mut ui_state.editing_group_name,
                                                        "–ò–º—è –≥—Ä—É–ø–ø—ã",
                                                        ui.available_width(),
                                                        20.0
                                                    );
                                                });
                                            });
                                            
                                            ui.horizontal(|ui| {
                                                ui.label("–†–æ–¥–∏—Ç–µ–ª—å:");
                                                UiComponents::group_selector(
                                                    ui,
                                                    ui_state.editing_group_parent_id,
                                                    &app_state.groups,
                                                    &format!("edit_parent_{}", group_id),
                                                    |parent_id| ui_state.editing_group_parent_id = parent_id,
                                                    20
                                                );
                                            });
                                            
                                            ui.horizontal(|ui| {
                                                if ui.small_button("‚úîÔ∏è").on_hover_text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å").clicked() {
                                                    groups_to_save.push((group_id, ui_state.editing_group_name.clone(), ui_state.editing_group_parent_id));
                                                }
                                                if ui.small_button("‚ùå").on_hover_text("–û—Ç–º–µ–Ω–∞").clicked() {
                                                    ui_state.editing_group_id = None;
                                                    ui_state.editing_group_name.clear();
                                                    ui_state.editing_group_parent_id = None;
                                                }
                                            });
                                        });
                                    } else {
                                        // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                        ui.label(&group_name);
                                        
                                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –≥—Ä—É–ø–ø—É
                                        if let Some(parent_id) = parent_id {
                                            if let Some(parent) = app_state.groups.iter().find(|g| g.id == parent_id) {
                                                ui.label(format!("(–≤: {})", parent.name));
                                            }
                                        } else {
                                            ui.label("(–∫–æ—Ä–Ω–µ–≤–∞—è)");
                                        }
                                        
                                        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
                                        let notes_count = app_state.notes.iter().filter(|n| n.group_id == Some(group_id)).count();
                                        ui.label(format!("({} –∑–∞–º–µ—Ç–æ–∫)", notes_count));
                                        
                                        ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                                            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                                            if ui.small_button("üóë").on_hover_text("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É").clicked() {
                                                groups_to_delete.push(group_id);
                                            }
                                            
                                            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                            if ui.small_button("‚úèÔ∏è").on_hover_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É").clicked() {
                                                ui_state.editing_group_id = Some(group_id);
                                                ui_state.editing_group_name = group_name.clone();
                                                ui_state.editing_group_parent_id = parent_id;
                                            }
                                        });
                                    }
                                });
                                ui.separator();
                            }
                                                });
                
                ui.separator();
                
                if ui.button("–ó–∞–∫—Ä—ã—Ç—å").clicked() {
                    ui_state.show_group_editor = false;
                }
            });
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if !groups_to_save.is_empty() {
            ui_state.editing_group_id = None;
            ui_state.editing_group_name.clear();
            ui_state.editing_group_parent_id = None;
        }
        
        (groups_to_save, groups_to_delete)
    }
} 