name: Build Multi-Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: Notes-windows-x64
            artifact-path: target/release/Notes.exe
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: Notes-linux-x64
            artifact-path: target/release/Notes
            
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact-name: Notes-macos-intel
            artifact-path: target/release/Notes
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: Notes-macos-apple-silicon
            artifact-path: target/release/Notes

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libglib2.0-dev \
          libcairo2-dev \
          libpango1.0-dev \
          libatk1.0-dev \
          libgdk-pixbuf2.0-dev \
          libssl-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxcb1-dev \
          libx11-dev \
          libxcb-render0-dev \
          libxcb-render-util0-dev \
          libxcb-keysyms1-dev \
          libxcb-image0-dev \
          libxcb-shm0-dev \
          libxcb-util0-dev

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # Устанавливаем Xcode command line tools если нужно
        xcode-select --install || true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip ${{ matrix.artifact-path }}

    - name: Create release directory
      run: mkdir -p releases/${{ matrix.artifact-name }}

    - name: Copy binary to release directory
      run: cp ${{ matrix.artifact-path }} releases/${{ matrix.artifact-name }}/

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: releases/${{ matrix.artifact-name }}/

    - name: Create release archive
      if: github.event_name == 'release'
      run: |
        cd releases
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ${{ matrix.artifact-name }}.zip ${{ matrix.artifact-name }}/
        else
          tar -czf ${{ matrix.artifact-name }}.tar.gz ${{ matrix.artifact-name }}/
        fi

    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: releases/${{ matrix.artifact-name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_name: ${{ matrix.artifact-name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_content_type: application/${{ matrix.os == 'windows-latest' && 'zip' || 'gzip' }} 